{"version":3,"sources":["Loader/Loader.js","Table/Table.js","DeteilRowView/DeteilRowView.js","ModeSelector/ModeSelector.js","TableSearch/TableSearch.js","AddRow/AddRow.js","App.js","serviceWorker.js","index.js"],"names":["className","props","onClick","onSort","bind","sortField","sort","data","map","item","key","id","phone","onRowSelect","firstName","lastName","email","person","defaultValue","description","address","streetAddress","city","state","zip","style","display","justifyContent","padding","onSelect","useState","value","setValue","onSearch","type","onChange","event","target","activeInput","onSubmit","handleFormSubmit","handleInputChange","name","newId","newFirstName","newLastName","newEmail","newPhone","activateInputRow","App","isLoading","search","row","isModeSelected","currentPage","cloneData","concat","_","orderBy","setState","modeSElectHandler","url","fetchData","pageChangeHandler","selected","searchHandler","preventDefault","push","input","fetch","response","json","this","result","filter","toLowerCase","includes","length","ModeSelector","filteredData","getFilteredData","pageCount","Math","ceil","displayData","chunk","Fragment","TableSearch","AddRow","DeteilRowView","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","pageClassName","pageLinkClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","forcePage","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b90f2a2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Loader.css\";\n\nexport default () => (\n  <div className=\"lds-ripple\">\n    <div></div>\n    <div></div>\n  </div>\n);\n","import React from \"react\";\nimport \"./Table.css\";\n\nexport default (props) => (\n  <table className=\"table\">\n    <thead>\n      <tr>\n        <th onClick={props.onSort.bind(null, \"id\")}>\n          ID {props.sortField === \"id\" ? <small>{props.sort}</small> : null}\n        </th>\n        <th onClick={props.onSort.bind(null, \"firstName\")}>\n          First Name{\" \"}\n          {props.sortField === \"firstName\" ? <small>{props.sort}</small> : null}\n        </th>\n        <th onClick={props.onSort.bind(null, \"lastName\")}>\n          Last Name{\" \"}\n          {props.sortField === \"lastName\" ? <small>{props.sort}</small> : null}\n        </th>\n        <th onClick={props.onSort.bind(null, \"email\")}>\n          E-mail{\" \"}\n          {props.sortField === \"email\" ? <small>{props.sort}</small> : null}\n        </th>\n        <th onClick={props.onSort.bind(null, \"phone\")}>\n          Phone{\" \"}\n          {props.sortField === \"phone\" ? <small>{props.sort}</small> : null}\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      {props.data.map((item) => (\n        <tr\n          key={item.id + item.phone}\n          onClick={props.onRowSelect.bind(null, item)}\n        >\n          <td>{item.id}</td>\n          <td>{item.firstName}</td>\n          <td>{item.lastName}</td>\n          <td>{item.email}</td>\n          <td>{item.phone}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React from \"react\";\n\nexport default ({ person }) => (\n  <div>\n    <p>\n      Выбран пользователь <b>{person.firstName + \" \" + person.lastName}</b>\n    </p>\n    <p>\n      Описание: <br />\n      <textarea defaultValue={person.description}></textarea>\n    </p>\n\n    <p>\n      Адрес проживания: <b>{person.address.streetAddress}</b>\n    </p>\n    <p>\n      Город: <b>{person.address.city}</b>\n    </p>\n    <p>\n      Провинция/штат: <b>{person.address.state}</b>\n    </p>\n    <p>\n      Индекс: <b>{person.address.zip}</b>\n    </p>\n  </div>\n);\n","import React from \"react\";\n\nexport default (props) => {\n  const smallUrl =\n    \"https://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}\";\n  const bigUrl =\n    \"https://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}\";\n  return (\n    <div\n      style={{ display: \"flex\", justifyContent: \"center\", padding: \"50px 0\" }}\n    >\n      <button\n        onClick={() => props.onSelect(smallUrl)}\n        className=\"btn btn-success\"\n      >\n        32 элемента\n      </button>\n      <button onClick={() => props.onSelect(bigUrl)} className=\"btn btn-danger\">\n        1000 элементов\n      </button>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\n\nexport default props => {\n  const [value, setValue] = useState(\"\");\n  const valueChangeHandler = event => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <div className=\"input-group mb-3 mt-3\">\n      <div className=\"input-group-prepend\">\n        <button\n          className=\"btn btn-outline-secondary\"\n          onClick={() => props.onSearch(value)}\n        >\n          Search\n        </button>\n      </div>\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        onChange={valueChangeHandler}\n        value={value}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default props => {\n  return (\n    <div>\n      {props.activeInput ? (\n        <form className=\"mb-3\" onSubmit={props.handleFormSubmit}>\n          <label className=\"mr-4\">\n            ID\n            <br />\n            <input\n              onChange={props.handleInputChange}\n              type=\"text\"\n              name=\"id\"\n              value={props.newId}\n            />\n          </label>\n          <label className=\"mr-4\">\n            First Name\n            <br />\n            <input\n              onChange={props.handleInputChange}\n              type=\"text\"\n              name=\"firstName\"\n              value={props.newFirstName}\n            />\n          </label>\n          <label className=\"mr-4\">\n            Last Name\n            <br />\n            <input\n              onChange={props.handleInputChange}\n              type=\"text\"\n              name=\"lastName\"\n              value={props.newLastName}\n            />\n          </label>\n          <label className=\"mr-4\">\n            E-mail\n            <br />\n            <input\n              onChange={props.handleInputChange}\n              type=\"text\"\n              name=\"email\"\n              value={props.newEmail}\n            />\n          </label>\n          <label className=\"mr-4\">\n            Phone\n            <br />\n            <input\n              onChange={props.handleInputChange}\n              type=\"tel\"\n              name=\"phone\"\n              value={props.newPhone}\n            />\n          </label>\n          <button type=\"submit\" value=\"Submit\">\n            Add user\n          </button>\n        </form>\n      ) : (\n        <button\n          className=\"btn btn-outline-success mb-3\"\n          onClick={props.activateInputRow}\n        >\n          Add\n        </button>\n      )}\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport Loader from \"./Loader/Loader\";\nimport Table from \"./Table/Table\";\nimport DeteilRowView from \"./DeteilRowView/DeteilRowView\";\nimport ModeSelector from \"./ModeSelector/ModeSelector\";\nimport TableSearch from \"./TableSearch/TableSearch\";\nimport AddRow from \"./AddRow/AddRow\";\nimport _ from \"lodash\";\nimport ReactPaginate from \"react-paginate\";\n\nclass App extends Component {\n  state = {\n    isLoading: false,\n    data: [],\n    sort: \"asc\",\n    search: \"\",\n    sortField: \"id\",\n    row: null,\n    isModeSelected: false,\n    currentPage: 0,\n    activeInput: false,\n    id: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phone: \"\"\n  };\n  async fetchData(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({\n      isLoading: false,\n      data: _.orderBy(data, this.state.sortField, this.state.sort)\n    });\n  }\n  onSort = sortField => {\n    const cloneData = this.state.data.concat();\n    const sort = this.state.sort === \"asc\" ? \"desc\" : \"asc\";\n    const data = _.orderBy(cloneData, sortField, sort);\n\n    this.setState({ data, sort, sortField });\n  };\n  modeSElectHandler = url => {\n    this.setState({\n      isModeSelected: true,\n      isLoading: true\n    });\n    this.fetchData(url);\n  };\n  onRowSelect = row => {\n    this.setState({ row });\n  };\n  pageChangeHandler = ({ selected }) =>\n    this.setState({ currentPage: selected });\n\n  searchHandler = search => {\n    this.setState({ search, currentPage: 0 });\n  };\n\n  getFilteredData() {\n    const { data, search } = this.state;\n\n    if (!search) {\n      return data;\n    }\n\n    let result = data.filter(item => {\n      return (\n        item[\"firstName\"].toLowerCase().includes(search.toLowerCase()) ||\n        item[\"lastName\"].toLowerCase().includes(search.toLowerCase()) ||\n        item[\"email\"].toLowerCase().includes(search.toLowerCase())\n      );\n    });\n    if (!result.length) {\n      result = this.state.data;\n    }\n    return result;\n  }\n\n  activateInputRow = event => {\n    event.preventDefault();\n    this.setState({ activeInput: true });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n\n    let data = [...this.state.data];\n\n    data.push({\n      id: this.state.id,\n      firstName: this.state.firstName,\n      lastName: this.state.lastName,\n      email: this.state.email,\n      phone: this.state.phone\n    });\n\n    this.setState({\n      data,\n      id: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\"\n    });\n  };\n\n  handleInputChange = event => {\n    let input = event.target;\n    let name = event.target.name;\n    let value = input.value;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  render() {\n    const pageSize = 50;\n    if (!this.state.isModeSelected) {\n      return (\n        <div className=\"container\">\n          <ModeSelector onSelect={this.modeSElectHandler} />\n        </div>\n      );\n    }\n\n    const filteredData = this.getFilteredData();\n    const pageCount = Math.ceil(filteredData.length / pageSize);\n    const displayData = _.chunk(filteredData, pageSize)[this.state.currentPage];\n\n    return (\n      <div className=\"container\">\n        {this.state.isLoading ? (\n          <Loader />\n        ) : (\n          <React.Fragment>\n            <TableSearch onSearch={this.searchHandler} />\n            <Table\n              data={displayData}\n              onSort={this.onSort}\n              sort={this.state.sort}\n              sortField={this.state.sortField}\n              onRowSelect={this.onRowSelect}\n            />\n            <AddRow\n              activeInput={this.state.activeInput}\n              activateInputRow={this.activateInputRow}\n              handleFormSubmit={this.handleFormSubmit}\n              handleInputChange={this.handleInputChange}\n              newId={this.state.id}\n              newFirstName={this.state.firstName}\n              newLastName={this.state.lastName}\n              newEmail={this.state.email}\n              newPhone={this.state.phone}\n            />\n          </React.Fragment>\n        )}\n        {this.state.row ? <DeteilRowView person={this.state.row} /> : null}\n        {this.state.data.length > pageSize ? (\n          <ReactPaginate\n            previousLabel={\"<\"}\n            nextLabel={\">\"}\n            breakLabel={\"...\"}\n            breakClassName={\"break-me\"}\n            pageCount={pageCount}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            onPageChange={this.pageChangeHandler}\n            containerClassName={\"pagination\"}\n            activeClassName={\"active\"}\n            pageClassName=\"page-item\"\n            pageLinkClassName=\"page-link\"\n            previousClassName=\"page-item\"\n            nextClassName=\"page-item\"\n            previousLinkClassName=\"page-link\"\n            nextLinkClassName=\"page-link\"\n            forcePage={this.state.currentPage}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}