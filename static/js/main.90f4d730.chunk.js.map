{"version":3,"sources":["Loader/Loader.js","Table/Table.js","DeteilRowView/DeteilRowView.js","ModeSelector/ModeSelector.js","TableSearch/TableSearch.js","App.js","serviceWorker.js","index.js"],"names":["className","props","onClick","onSort","bind","sortField","sort","data","map","item","key","id","phone","onRowSelect","firstName","lastName","email","person","defaultValue","description","address","streetAddress","city","state","zip","style","display","justifyContent","padding","onSelect","useState","value","setValue","onSearch","type","onChange","event","target","App","isLoading","search","row","isModeSelected","currentPage","cloneData","concat","_","orderBy","setState","modeSElectHandler","url","fetchData","pageChangeHandler","selected","searchHandler","fetch","response","json","this","filter","toLowerCase","includes","displayData","chunk","filteredData","getFilteredData","pageCount","Math","ceil","length","Fragment","TableSearch","Table","DeteilRowView","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","pageClassName","pageLinkClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","forcePage","ModeSelector","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.90f4d730.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Loader.css\";\r\n\r\nexport default () => (\r\n  <div className=\"lds-ripple\">\r\n    <div></div>\r\n    <div></div>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\n\r\nexport default (props) => (\r\n  <table className=\"table\">\r\n    <thead>\r\n      <tr>\r\n        <th onClick={props.onSort.bind(null, \"id\")}>\r\n          ID {props.sortField === \"id\" ? <small>{props.sort}</small> : null}\r\n        </th>\r\n        <th onClick={props.onSort.bind(null, \"firstName\")}>\r\n          First Name{\" \"}\r\n          {props.sortField === \"firstName\" ? <small>{props.sort}</small> : null}\r\n        </th>\r\n        <th onClick={props.onSort.bind(null, \"lastName\")}>\r\n          Last Name{\" \"}\r\n          {props.sortField === \"lastName\" ? <small>{props.sort}</small> : null}\r\n        </th>\r\n        <th onClick={props.onSort.bind(null, \"email\")}>\r\n          E-mail{\" \"}\r\n          {props.sortField === \"email\" ? <small>{props.sort}</small> : null}\r\n        </th>\r\n        <th onClick={props.onSort.bind(null, \"phone\")}>\r\n          Phone{\" \"}\r\n          {props.sortField === \"phone\" ? <small>{props.sort}</small> : null}\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {props.data.map((item) => (\r\n        <tr\r\n          key={item.id + item.phone}\r\n          onClick={props.onRowSelect.bind(null, item)}\r\n        >\r\n          <td>{item.id}</td>\r\n          <td>{item.firstName}</td>\r\n          <td>{item.lastName}</td>\r\n          <td>{item.email}</td>\r\n          <td>{item.phone}</td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  </table>\r\n);\r\n","import React from \"react\";\r\n\r\nexport default ({ person }) => (\r\n  <div>\r\n    <p>\r\n      Выбран пользователь <b>{person.firstName + \" \" + person.lastName}</b>\r\n    </p>\r\n    <p>\r\n      Описание: <br />\r\n      <textarea defaultValue={person.description}></textarea>\r\n    </p>\r\n\r\n    <p>\r\n      Адрес проживания: <b>{person.address.streetAddress}</b>\r\n    </p>\r\n    <p>\r\n      Город: <b>{person.address.city}</b>\r\n    </p>\r\n    <p>\r\n      Провинция/штат: <b>{person.address.state}</b>\r\n    </p>\r\n    <p>\r\n      Индекс: <b>{person.address.zip}</b>\r\n    </p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\n\r\nexport default (props) => {\r\n  const smallUrl =\r\n    \"http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}\";\r\n  const bigUrl =\r\n    \"http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}\";\r\n  return (\r\n    <div\r\n      style={{ display: \"flex\", justifyContent: \"center\", padding: \"50px 0\" }}\r\n    >\r\n      <button\r\n        onClick={() => props.onSelect(smallUrl)}\r\n        className=\"btn btn-success\"\r\n      >\r\n        32 элемента\r\n      </button>\r\n      <button onClick={() => props.onSelect(bigUrl)} className=\"btn btn-danger\">\r\n        1000 элементов\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default (props) => {\r\n  const [value, setValue] = useState(\"\");\r\n  const valueChangeHandler = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"input-group mb-3 mt-3\">\r\n      <div className=\"input-group-prepend\">\r\n        <button\r\n          className=\"btn btn-outline-secondary\"\r\n          onClick={() => props.onSearch(value)}\r\n        >\r\n          Search\r\n        </button>\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        onChange={valueChangeHandler}\r\n        value={value}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\nimport Loader from \"./Loader/Loader\";\nimport Table from \"./Table/Table\";\nimport DeteilRowView from \"./DeteilRowView/DeteilRowView\";\nimport ModeSelector from \"./ModeSelector/ModeSelector\";\nimport TableSearch from \"./TableSearch/TableSearch\";\nimport _ from \"lodash\";\nimport ReactPaginate from \"react-paginate\";\n\nclass App extends Component {\n  state = {\n    isLoading: false,\n    data: [],\n    sort: \"asc\",\n    search: \"\",\n    sortField: \"id\",\n    row: null,\n    isModeSelected: false,\n    currentPage: 0,\n  };\n  async fetchData(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({\n      isLoading: false,\n      data: _.orderBy(data, this.state.sortField, this.state.sort),\n    });\n  }\n  onSort = (sortField) => {\n    const cloneData = this.state.data.concat();\n    const sort = this.state.sort === \"asc\" ? \"desc\" : \"asc\";\n    const data = _.orderBy(cloneData, sortField, sort);\n\n    this.setState({ data, sort, sortField });\n  };\n  onRowSelect = (row) => {\n    this.setState({ row });\n  };\n  modeSElectHandler = (url) => {\n    this.setState({\n      isModeSelected: true,\n      isLoading: true,\n    });\n    this.fetchData(url);\n  };\n  pageChangeHandler = ({ selected }) =>\n    this.setState({ currentPage: selected });\n\n  searchHandler = (search) => this.setState({ search, currentPage: 0 });\n\n  getFilteredData() {\n    const { data, search } = this.state;\n\n    if (!search) {\n      return data;\n    }\n\n    return data.filter((item) => {\n      return (\n        item[\"firstName\"].toLowerCase().includes(search.toLowerCase()) ||\n        item[\"lastName\"].toLowerCase().includes(search.toLowerCase()) ||\n        item[\"email\"].toLowerCase().includes(search.toLowerCase())\n      );\n    });\n  }\n\n  render() {\n    const pageSize = 50;\n    const displayData = _.chunk(this.state.data, pageSize)[\n      this.state.currentPage\n    ];\n    const filteredData = this.getFilteredData();\n    const pageCount = Math.ceil(filteredData.length / pageSize);\n\n    if (!this.state.isModeSelected) {\n      return (\n        <div className=\"container\">\n          <ModeSelector onSelect={this.modeSElectHandler} />\n        </div>\n      );\n    }\n    return (\n      <div className=\"container\">\n        {this.state.isLoading ? (\n          <Loader />\n        ) : (\n          <React.Fragment>\n            <TableSearch onSearch={this.searchHandler} />\n            <Table\n              data={displayData}\n              onSort={this.onSort}\n              sort={this.state.sort}\n              sortField={this.state.sortField}\n              onRowSelect={this.onRowSelect}\n            />\n          </React.Fragment>\n        )}\n        {this.state.row ? <DeteilRowView person={this.state.row} /> : null}\n        {this.state.data.length > pageSize ? (\n          <ReactPaginate\n            previousLabel={\"<\"}\n            nextLabel={\">\"}\n            breakLabel={\"...\"}\n            breakClassName={\"break-me\"}\n            pageCount={pageCount}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            onPageChange={this.pageChangeHandler}\n            containerClassName={\"pagination\"}\n            activeClassName={\"active\"}\n            pageClassName=\"page-item\"\n            pageLinkClassName=\"page-link\"\n            previousClassName=\"page-item\"\n            nextClassName=\"page-item\"\n            previousLinkClassName=\"page-link\"\n            nextLinkClassName=\"page-link\"\n            forcePage={this.state.currentPage}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}